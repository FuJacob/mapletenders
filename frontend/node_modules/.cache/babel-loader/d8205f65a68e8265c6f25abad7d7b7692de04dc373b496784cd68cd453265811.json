{"ast":null,"code":"var _jsxFileName = \"/Users/jacobfu/Desktop/Projects/TDP/apps/frontend/src/auth/components/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from \"react\";\n\n// Define the shape of your auth state.\n\n// Define the context type to include the state and setter functions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with an initial undefined value.\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\n\n// The provider wraps your app and supplies the auth state.\nexport const AuthWrapper = props => {\n  _s();\n  const [auth, setAuth] = useState({\n    isAuthenticated: false,\n    user: {\n      email: \"\",\n      name: \"\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      setAuth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the auth context.\n_s(AuthWrapper, \"jMF9mJld+hnsSF4tEJIWTb4Tx9k=\");\n_c = AuthWrapper;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthWrapper\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthWrapper\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","undefined","AuthWrapper","props","_s","auth","setAuth","isAuthenticated","user","email","name","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/jacobfu/Desktop/Projects/TDP/apps/frontend/src/auth/components/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from \"react\";\n\n\n// Define the shape of your auth state.\ninterface AuthState {\n  isAuthenticated: boolean;\n  user: {\n    email: string;\n    name: string;\n  };\n}\n\n// Define the context type to include the state and setter functions.\ninterface AuthContextType {\n  auth: AuthState;\n  setAuth: React.Dispatch<React.SetStateAction<AuthState>>;\n  // appLoading: boolean;\n  // setAppLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\n// Create the context with an initial undefined value.\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// The provider wraps your app and supplies the auth state.\nexport const AuthWrapper: React.FC<{ children: ReactNode }> = (props) => {\n  const [auth, setAuth] = useState<AuthState>({\n    isAuthenticated: false,\n    user: {\n      email: \"\",\n      name: \"\",\n    },\n  });\n  return (\n    <AuthContext.Provider value={{ auth, setAuth }}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for consuming the auth context.\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthWrapper\");\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;;AAG7E;;AASA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;;AAEhF;AACA,OAAO,MAAMC,WAA8C,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAY;IAC1CW,eAAe,EAAE,KAAK;IACtBC,IAAI,EAAE;MACJC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE;IACR;EACF,CAAC,CAAC;EACF,oBACEX,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAEP,IAAI;MAAEC;IAAQ,CAAE;IAAAO,QAAA,EAC5CV,KAAK,CAACU;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;;AAED;AAAAb,EAAA,CAfaF,WAA8C;AAAAgB,EAAA,GAA9ChB,WAA8C;AAgB3D,OAAO,MAAMiB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGxB,UAAU,CAACG,WAAW,CAAC;EACvC,IAAI,CAACqB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}