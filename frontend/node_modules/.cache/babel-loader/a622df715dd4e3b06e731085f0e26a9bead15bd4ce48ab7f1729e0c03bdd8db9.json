{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Base URL for API endpoints\n * @constant {string}\n */\nconst API_BASE_URL = 'http://localhost:3000';\nconst PDF_ANALYSIS_URL = 'http://localhost:4500';\n\n/**\n * Interface defining the structure of a tender notice\n */\n\n/**\n * Get AI completion\n * @returns {Promise<any>} Completion response data\n */\nexport const getCompletion = async () => {\n  const response = await axios.post(`${API_BASE_URL}/api/completion`);\n  return response.data;\n};\n\n/**\n * Retrieve open tender notices from database\n * @returns {Promise<TenderNoticeInterface[]>} Array of tender notices\n */\nexport const getOpenTenderNoticesFromDB = async () => {\n  const response = await axios.get(`${API_BASE_URL}/getOpenTenderNoticesFromDB`);\n  return response.data;\n};\n\n/**\n * Generate leads based on form data\n * @param {any} formData - Form data for lead generation\n * @returns {Promise<any>} Generated leads data\n */\nexport const generateLeads = async formData => {\n  const response = await axios.post(`${API_BASE_URL}/generateLeads`, formData);\n  return response.data;\n};\n\n/**\n * Redirect to open tender notices page\n */\nexport const getOpenTenderNotices = () => {\n  window.location.href = `${API_BASE_URL}/getOpenTenderNotices`;\n};\n\n/**\n * Get filtered tender notices from database\n * @returns {Promise<TenderNoticeInterface[]>} Filtered tender notices\n */\nexport const getFilteredTenderNoticesFromDB = async () => {\n  const response = await axios.get(`${API_BASE_URL}/getFilteredTenderNoticesFromDB`);\n  return response.data;\n};\n\n/**\n * Filter open tender notices based on prompt\n * @param {string} prompt - Filter criteria\n * @returns {Promise<TenderNoticeInterface[]>} Filtered tender notices\n */\nexport const filterOpenTenderNotices = async prompt => {\n  const response = await axios.post(`${API_BASE_URL}/filterOpenTenderNotices`, {\n    prompt\n  });\n  return response.data;\n};\n\n/**\n * Save open tender notices to database\n * @returns {Promise<any>} Operation result\n */\nexport const getOpenTenderNoticesToDB = async () => {\n  const response = await axios.post(`${API_BASE_URL}/getOpenTenderNoticesToDB`);\n  return response.data;\n};\n\n/**\n * Analyze PDF document\n * @param {FormData} formData - Form data containing PDF file\n * @returns {Promise<any>} Analysis results\n */\nexport const analyzePdf = async formData => {\n  const response = await axios.post(`${PDF_ANALYSIS_URL}/analyze_pdf`, formData);\n  return response.data;\n};\n\n/**\n * Get RFP analysis\n * @param {any} rfpData - RFP data to analyze\n * @returns {Promise<any>} Analysis results\n */\nexport const getRfpAnalysis = async rfpData => {\n  const response = await axios.post(`${API_BASE_URL}/getRfpAnalysis`, rfpData);\n  return response.data;\n};","map":{"version":3,"names":["axios","API_BASE_URL","PDF_ANALYSIS_URL","getCompletion","response","post","data","getOpenTenderNoticesFromDB","get","generateLeads","formData","getOpenTenderNotices","window","location","href","getFilteredTenderNoticesFromDB","filterOpenTenderNotices","prompt","getOpenTenderNoticesToDB","analyzePdf","getRfpAnalysis","rfpData"],"sources":["/Users/jacobfu/Desktop/Projects/TDP/apps/frontend/src/api.ts"],"sourcesContent":["import axios from 'axios'\n\n/**\n * Base URL for API endpoints\n * @constant {string}\n */\nconst API_BASE_URL = 'http://localhost:3000'\nconst PDF_ANALYSIS_URL = 'http://localhost:4500'\n\n/**\n * Interface defining the structure of a tender notice\n */\nexport interface TenderNoticeInterface {\n  'title-titre-eng': string\n  'tenderStatus-appelOffresStatut-eng': string\n  'gsinDescription-nibsDescription-eng': string\n  'unspscDescription-eng': string\n  'noticeType-avisType-eng': string\n  'procurementMethod-methodeApprovisionnement-eng': string\n  'selectionCriteria-criteresSelection-eng': string\n  'limitedTenderingReason-raisonAppelOffresLimite-eng': string\n  'tradeAgreements-accordsCommerciaux-eng': string\n  'regionsOfOpportunity-regionAppelOffres-eng': string\n  'regionsOfDelivery-regionsLivraison-eng': string\n  'contractingEntityName-nomEntitContractante-eng': string\n  'contractingEntityAddressLine-ligneAdresseEntiteContractante-eng': string\n  'contractingEntityAddressCity-entiteContractanteAdresseVille-eng': string\n  'contractingEntityAddressProvince-entiteContractanteAdresseProvince-eng': string\n  'contractingEntityAddressCountry-entiteContractanteAdressePays-eng': string\n  'endUserEntitiesName-nomEntitesUtilisateurFinal-eng': string\n  'endUserEntitiesAddress-adresseEntitesUtilisateurFinal-eng': string\n  'contactInfoAddressLine-contactInfoAdresseLigne-eng': string\n  'contactInfoCity-contacterInfoVille-eng': string\n  'contactInfoProvince-contacterInfoProvince-eng': string\n  'contactInfoCountry-contactInfoPays-eng': string\n  'noticeURL-URLavis-eng': string\n  'attachment-piecesJointes-eng': string\n  'tenderDescription-descriptionAppelOffres-eng': string\n}\n\n/**\n * Get AI completion\n * @returns {Promise<any>} Completion response data\n */\nexport const getCompletion = async () => {\n  const response = await axios.post(`${API_BASE_URL}/api/completion`)\n  return response.data\n}\n\n/**\n * Retrieve open tender notices from database\n * @returns {Promise<TenderNoticeInterface[]>} Array of tender notices\n */\nexport const getOpenTenderNoticesFromDB = async () => {\n  const response = await axios.get(`${API_BASE_URL}/getOpenTenderNoticesFromDB`)\n  return response.data\n}\n\n/**\n * Generate leads based on form data\n * @param {any} formData - Form data for lead generation\n * @returns {Promise<any>} Generated leads data\n */\nexport const generateLeads = async (formData: any) => {\n  const response = await axios.post(`${API_BASE_URL}/generateLeads`, formData)\n  return response.data\n}\n\n/**\n * Redirect to open tender notices page\n */\nexport const getOpenTenderNotices = () => {\n  window.location.href = `${API_BASE_URL}/getOpenTenderNotices`\n}\n\n/**\n * Get filtered tender notices from database\n * @returns {Promise<TenderNoticeInterface[]>} Filtered tender notices\n */\nexport const getFilteredTenderNoticesFromDB = async () => {\n  const response = await axios.get(\n    `${API_BASE_URL}/getFilteredTenderNoticesFromDB`\n  )\n  return response.data\n}\n\n/**\n * Filter open tender notices based on prompt\n * @param {string} prompt - Filter criteria\n * @returns {Promise<TenderNoticeInterface[]>} Filtered tender notices\n */\nexport const filterOpenTenderNotices = async (prompt: string) => {\n  const response = await axios.post(`${API_BASE_URL}/filterOpenTenderNotices`, {\n    prompt,\n  })\n  return response.data\n}\n\n/**\n * Save open tender notices to database\n * @returns {Promise<any>} Operation result\n */\nexport const getOpenTenderNoticesToDB = async () => {\n  const response = await axios.post(`${API_BASE_URL}/getOpenTenderNoticesToDB`)\n  return response.data\n}\n\n/**\n * Analyze PDF document\n * @param {FormData} formData - Form data containing PDF file\n * @returns {Promise<any>} Analysis results\n */\nexport const analyzePdf = async (formData: FormData) => {\n  const response = await axios.post(`${PDF_ANALYSIS_URL}/analyze_pdf`, formData)\n  return response.data\n}\n\n/**\n * Get RFP analysis\n * @param {any} rfpData - RFP data to analyze\n * @returns {Promise<any>} Analysis results\n */\nexport const getRfpAnalysis = async (rfpData: any) => {\n  const response = await axios.post(`${API_BASE_URL}/getRfpAnalysis`, rfpData)\n  return response.data\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,uBAAuB;AAC5C,MAAMC,gBAAgB,GAAG,uBAAuB;;AAEhD;AACA;AACA;;AA6BA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,iBAAiB,CAAC;EACnE,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAAA,CAAA,KAAY;EACpD,MAAMH,QAAQ,GAAG,MAAMJ,KAAK,CAACQ,GAAG,CAAC,GAAGP,YAAY,6BAA6B,CAAC;EAC9E,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAa,IAAK;EACpD,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,gBAAgB,EAAES,QAAQ,CAAC;EAC5E,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,oBAAoB,GAAGA,CAAA,KAAM;EACxCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAGb,YAAY,uBAAuB;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMc,8BAA8B,GAAG,MAAAA,CAAA,KAAY;EACxD,MAAMX,QAAQ,GAAG,MAAMJ,KAAK,CAACQ,GAAG,CAC9B,GAAGP,YAAY,iCACjB,CAAC;EACD,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,uBAAuB,GAAG,MAAOC,MAAc,IAAK;EAC/D,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,0BAA0B,EAAE;IAC3EgB;EACF,CAAC,CAAC;EACF,OAAOb,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMY,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAClD,MAAMd,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,2BAA2B,CAAC;EAC7E,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,UAAU,GAAG,MAAOT,QAAkB,IAAK;EACtD,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGH,gBAAgB,cAAc,EAAEQ,QAAQ,CAAC;EAC9E,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,cAAc,GAAG,MAAOC,OAAY,IAAK;EACpD,MAAMjB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,iBAAiB,EAAEoB,OAAO,CAAC;EAC5E,OAAOjB,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}